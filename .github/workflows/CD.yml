name: CD

on:
  push:
    branches: master
  pull_request:
    branches: master

env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/master/MultiProjectRepository
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Awarnings

  TRAVIS_REPO_NAME: Data.Doublets
  SOURCE_BRANCH: master
  LIB_PATH: rust/ffi/target/release

jobs:
  test_rust:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: rustup toolchain install nightly
      - name: All Tests
        run: |
          cd rust
          cargo +nightly test --release -- --exact --nocapture
  publish_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Rustup nightly
      run: |
        rustup toolchain install nightly
    - name: Build
      run: |
        cd rust/ffi
        cargo +nightly build --release
    - name: publish
      shell: bash
      run: |
        export TARGET_PLATFORM="windows-x64"
        export LIB_NAME="doublets_ffi.dll"
        export TARGET_LIB_NAME="Platform.Doublets.dll"
        ./publish-bin.sh
  publish_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: |
          rustup toolchain install nightly
      - name: Build
        run: |
          cd rust/ffi
          cargo +nightly build --release
      - name: publish
        run: |
          export TARGET_PLATFORM="linux-x64"
          export LIB_NAME="libdoublets_ffi.so"
          export TARGET_LIB_NAME="libPlatform.Doublets.so"
          bash ./publish-bin.sh
  publish_macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Rustup nightly
        run: |
          rustup toolchain install nightly
      - name: Build
        run: |
          cd rust/ffi
          cargo +nightly build --release
      - name: publish
        run: |
          export TARGET_PLATFORM="macos-x64"
          export LIB_NAME="libdoublets_ffi.dylib"
          export TARGET_LIB_NAME="libPlatform.Doublets.dylib"
          bash ./publish-bin.sh
  publich_to_nuget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Push
        run: |
          mkdir runtimes && cd runtimes
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/windows-x64/native/Platform.Doublets.dll
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/macos-x64/native/libPlatform.Doublets.dylib
          wget https://github.com/linksplatform/Data.Doublets/raw/binaries/linux-x64/native/libPlatform.Doublets.so
          ls
          cd ..

          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/push-cpp-nuget.sh"

          CPP_PACKAGE_NUSPEC_PATH="rust/ffi/nuget/"
          echo "$CPP_PACKAGE_NUSPEC_PATH"
          echo "$CPP_PACKAGE_NUSPEC_PATH" > CPP_PACKAGE_NUSPEC_PATH.txt

          CPP_PACKAGE_VERSION="rust/ffi/nuget/"
          echo "$CPP_PACKAGE_VERSION"
          echo "$CPP_PACKAGE_VERSION" > CPP_PACKAGE_VERSION.txt

          bash ./push-cpp-nuget.sh
  testAndDeploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - name: Test
      run: dotnet test -c Release -f net5
    - name: Generate PDF with CSharp code
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
        wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
        wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
        bash ./generate-csharp-pdf.sh
    - name: Publish CSharp documentation to gh-pages branch
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/docfx.json"
        wget "$SCRIPTS_BASE_URL/filter.yml"
        wget "$SCRIPTS_BASE_URL/toc.yml"
        wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
        bash ./publish-csharp-docs.sh
    - name: Read CSharp project information
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
        bash ./read_csharp_package_info.sh
    - name: Publish CSharp NuGet package
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
        bash ./push-csharp-nuget.sh
    - name: Publish release
      if: github.event_name == 'push'
      run: |
        export REPOSITORY_NAME=$(basename ${{ github.repository }})
        wget "$SCRIPTS_BASE_URL/publish-release.sh"
        bash ./publish-release.sh

  pushCSharpNuGetToGitHubPackageRegistry:
    needs: testAndDeploy
    if: github.event_name == 'push'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: nuget/setup-nuget@v1
      - name: Publish CSharp NuGet to GitHub Package Registry
        run: |
          dotnet build -c Release
          dotnet pack -c Release
          nuget source Add -Name "GitHub" -Source "https://nuget.pkg.github.com/linksplatform/index.json" -UserName linksplatform -Password ${{ secrets.GITHUB_TOKEN }}
          nuget push **/*.nupkg -Source "GitHub" -SkipDuplicate
